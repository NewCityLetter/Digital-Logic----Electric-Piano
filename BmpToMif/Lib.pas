unit Lib;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, RzTabs;

const
  COPYRIGHT = 
      '-- Copyright (C) 2006 Laputa Develop Group' + #13#10 +
      '-- PicToMif is a freeware, which can be spread freely, '+ #13#10 +
      '-- as long as not being used in commerce.' + #13#10#13#10 +
      '-- Memory Initialization File (.mif) generated by PicToMif can' + #13#10 +
      '-- be used in Quartus to initialize the roms or rams.';

  procedure SaveBinaryToMif(FileName: string; Len: Integer; MifName: string; Log :TStrings);
implementation

  procedure SaveBinaryToMif(FileName: string; Len: Integer; MifName: string; Log :TStrings);
  var
    MifFile: TextFile;
    BinFile: file;
    Fix: Char;
    Depth, BitLen: Integer;
    Data: Byte;
    I: Integer;
    Row, Col: Integer;
    ALine: string;
    BitChar: Char;
  begin
   // {$I-}
    AssignFile(MifFile, MifName);
    AssignFile(BinFile, FileName);
    Fix := ' ';
    Reset(BinFile, 1);
    Rewrite(MifFile);

    BitLen := FileSize(BinFile) * 8;
    if (BitLen mod Len <> 0) then
    begin
      case Application.MessageBox(PChar('给定的字宽度：(' + IntToStr(Len) + ')无法整除文件位长度：(' +
          IntToStr(BitLen)+')。' +
          #13#10 + '选择“是”用0补齐，选择“否”用1补齐，' + #13#10 +
          '选择“取消”则停止。'), '无法整除', MB_YESNOCANCEL + MB_ICONWARNING)
      of
         IDYES:
           begin
             Fix := '0';
           end;
         IDNO:
           begin
             Fix := '1';
           end
         else Exit;
      end;
    end;

    Writeln(MifFile, COPYRIGHT);
    Writeln(MifFile, '');

    Writeln(miffile, 'WIDTH = ' + IntToStr(Len) + ';');
    Depth := BitLen div Len;
    Log.Add('Data Size : ' + IntToStr(BitLen));
    Log.Add('Width     : ' + IntToStr(Len));
    Log.Add('Depth     : ' + IntToStr(Depth));
    Log.Add('Fix       : ' + Fix);
    if (Fix <> ' ') then Inc(Depth);
    Writeln(miffile, 'DEPTH = ' + IntToStr(Depth) + ';');
    Writeln(miffile, '');

    Writeln(miffile, 'ADDRESS_RADIX = UNS;');
    Writeln(miffile, 'DATA_RADIX = BIN;');

    Writeln(miffile, 'CONTENT BEGIN');

    Row := 0;
    Col := 0;
    ALine := '';
    while not Eof(BinFile) do
    begin
      BlockRead(BinFile, Data, 1);
      for I := 7 downto 0 do
      begin
        if (Data shr I) and 1 = 1 then
          BitChar := '1'
        else
          BitChar := '0';
        Inc(Col);
        ALine := ALine + BitChar;
        if (Col >= Len) then
        begin
          Writeln(MifFile, #09 + IntToStr(Row) + '  :  ' + ALine +';');
          Inc(Row);
          Col := 0;
          ALine := '';
        end;
      end;
    end;
    if (Fix <> ' ') then
    begin
      for I := Col + 1 to Len do
      begin
        ALine := ALine + Fix;
      end;
      Writeln(MifFile, #09 + IntToStr(Row) + '  :  ' + ALine +';');
    end;
    Writeln(MifFile, 'END;');

    CloseFile(MifFile);
    CloseFile(BinFile);
    {$I+}
  end;
end.
